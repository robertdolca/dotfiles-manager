#!/bin/bash

################################################################################
#Copyright 2015 Robert Dolca <robert.dolca@gmail.com>
#
#Licensed under the Apache License, Version 2.0 (the "License");
#you may not use this file except in compliance with the License.
#You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
###############################################################################

HERE=`dirname $0`
REPO="$HERE/files/"

function homepath {
	len=`expr ${#HOME} + 1`
	name=${1:$len}
	echo $name | sed "s/^\///g"
}

function repopath {
	len=`expr ${#REPO}`
	name=${1:$len}
	echo $name | sed "s/^\///g"
}

function log {
	if [ $VERBOSE -eq 1 ]; then
		echo "$1"
	fi
}

function find_files {
	# Get the base path for the search
	BASE=$1

	# There is a global versioned white/blacklist and there is a local one
	whitelist=`cat $HERE/whitelist.txt $HOME/.dotfiles/whitelist.txt 2> /dev/null`
	blacklist=`cat $HERE/blacklist.txt $HOME/.dotfiles/blacklist.txt 2> /dev/null`

	# Remove empty lines
	whitelist=`echo "$whitelist" | grep -v '^$'`
	blacklist=`echo "$blacklist" | grep -v '^$'`

	# Check if the whitelist is empty
	if ! [ -n "$whitelist" ]; then
		echo "Error: the whitelist can not be empty"
		exit 1
	fi

	# Make a string with all the whitelisted files (separated by space)
	search=`echo -n "$whitelist" | perl -p -e "s#\n#\" \"$BASE/#"`
	search="\"$BASE/$search\""

	# Check if there is anything blacklisted
	if [ -n "$blacklist" ]; then
		blacklist=`echo -n "$blacklist" | perl -p -e "s#/\\$##"`
		ignore=`echo -n "$blacklist" | perl -p -e "s#\n#\" -o -path \"$BASE/#"`
		ignore="\( -path \"$BASE$ignore\" \) -prune -o -print"
	else
		ignore=""
	fi

	eval find $search $ignore 2> /dev/null
}

function collect {

	# Create the repo folder if it's not present
	mkdir -p $REPO

	# Create the local white/blacklist
	mkdir -p "$HOME/.dotfiles"
	touch "$HOME/.dotfiles/whitelist.txt"
	touch "$HOME/.dotfiles/blacklist.txt"

	files=`find_files $HOME`

	# For each entry in the list
	for homepath in $files; do

		# Get the path relative to the home folder
		filename=`homepath $homepath`

		# Path in the home folder
		repopath="$REPO/$filename"

		# If it's a folder we don't need it
		if ! [ -d $homepath ] && ! [ -d $repopath ]; then

			# Check if the files are the same
			if diff $repopath $homepath &> /dev/null; then
				log "same   $filename"
			else
				if [ -f $repopath ]; then
					log "update $filename"
				else
					log "create $filename"
				fi

				# If this is a dry run we don't change anything
				if [ $DRY_RUN -eq 0 ]; then

					# If the folder containing the
					# file does not exit create it
					mkdir -p "$REPO/`dirname $filename`"

					# Copy the file
					cp $homepath $REPO/$filename
				fi
			fi
		fi
	done
}

function deploy {
	if ! [ -d $REPO ]; then
		echo "Repo not found"
	fi

	files=`find_files $REPO`

	# For each entry in the list
	for repopath in $files; do
		# Get the path relative to the repo folder
		filename=`repopath $repopath`

		# Path in the home folder
		homepath="$HOME/$filename"

		# We don't touch folders
		if ! [ -d $repopath ] && ! [ -d $homepath ]; then

			# Check if the files are the same
			if diff $repopath $homepath &> /dev/null; then
				log "same   $filename"
			else
				if [ -f $homepath ]; then
					log "update $filename"
				else
					log "create $filename"
				fi

				# If this is a dry run we don't change anything
				if [ $DRY_RUN -eq 0 ]; then

					# If the folder containing the
					# file does not exit create it
					mkdir -p "`dirname $homepath`"

					# Copy the file
					cp $repopath $homepath
				fi
			fi
		fi
	done
}

function show_help {
	echo "./dotfiles [collect|deploy] {OPTIONS}"
	echo "Options"
	echo -e "\t-d|--dry\tSimulate a run"
	echo -e "\t-v|--verbose\tShow the name of the files copied"
}

# The 1st parameter is the command
command=$1
shift

# Default value for options
DRY_RUN=0
VERBOSE=0

while [[ $# > 0 ]]; do
	key="$1"
	case $key in
		-d|--dry)
			DRY_RUN=1
			VERBOSE=1
			;;
		-v|--verbose)
			VERBOSE=1
			;;
		*)
			echo "Unknown option $key"
			show_help
			exit 1
			;;
	esac
	shift
	shift
done

case $command in
	collect)
		collect
		;;
	deploy)
		deploy
		;;
	*)
		show_help
		;;
esac
